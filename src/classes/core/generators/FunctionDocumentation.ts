import { NativeFunction } from '../NativeFunction'
import { AsciiTable3 } from 'ascii-table3'
import fs from 'fs'
import { join } from 'path'

/**
 * Represents the documentation of a function.
 */
export class FunctionDocumentation {
    #data: NativeFunction
    constructor(data: NativeFunction) {
        this.#data = data
    }

    /**
     * Returns the function documentation as markdown.
     * @returns {string}
     */
    toMD() {
        const base = [
            `# ${this.#data.name}`,
            this.#data.description,
            '',
            '## Usage',
            `> \`${this.usage}\``
        ]

        if (this.#data.parameters?.length) {
            const table = new AsciiTable3()
            .setHeading('Name', 'Description', 'Default value')            
            .addRowMatrix(this.#data.parameters.map(p => {
                return [p.name, p.description, p.defo]
            }))
            .setStyle('github-markdown')

            base.push(
                '',
                '## Parameters',
                table.toString()
            )
        }

        base.push(
            '',
            '## Example',
            '```',
            this.#data.example!,
            '```'
        )

        return base.join('\n')
    }

    /**
     * Get the usage of this function.
    */
    get usage() {
        return `{${this.#data.name + (this.#data.parameters && this.#data.parameters?.length > 0 ? (' => ' + this.#data.parameters.map(p => p.name.toLowerCase()).join(':')) : '')}}`
    }
}

/**
 * Generates the function documentation.
 * @param dir - Functions directory.
 */
export function GenerateFunctions(dir: string, output: string) {
    if (!fs.existsSync(join(process.cwd(), output))) {
        fs.mkdirSync(join(process.cwd(), output), { recursive: true })
    }
    const files = fs.readdirSync(join(process.cwd(), dir)).filter(file => file.endsWith('.js'))
    const functions: string[] = ['**FUNCTIONS**']
    for (const file of files) {
        const native = require(join(process.cwd(), dir, file))['default']
        if (native instanceof NativeFunction) {
            const documentation = new FunctionDocumentation(native)
            fs.writeFileSync(join(process.cwd(), output, file.replace('.js', '.md')), documentation.toMD())
            functions.push(`- (${native.name})[functions/${native.name}.md]`)
        }
    }
    fs.writeFileSync(join(process.cwd(), output, '_sidebar.md'), functions.join('\n'))
    return true
}

GenerateFunctions('lib/classes/core/functions', 'autogenerated/functions')